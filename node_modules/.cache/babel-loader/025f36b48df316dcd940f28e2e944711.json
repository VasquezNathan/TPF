{"ast":null,"code":"var _jsxFileName = \"/Users/nathanvasquez/Developer/GlassKeys/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport GlassKey from \"./contracts/GlassKey.json\";\nimport getWeb3 from \"./getWeb3\";\nimport NFTRow from \"./components/NFTRow\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = GlassKey.networks[networkId];\n        const instance = new web3.eth.Contract(GlassKey.abi, deployedNetwork && deployedNetwork.address); //variables used to keep track of the tickers\n\n        const currentSupply = parseInt((await instance.methods.currentSupply().call()));\n        const maxSupply = parseInt((await instance.methods._maxSupply().call()));\n        const balance = parseInt((await instance.methods.balanceOf(accounts[0]).call())); // table for displaying token with their type and their owners.\n\n        const table = \"\"; // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance,\n          currentSupply,\n          maxSupply,\n          balance,\n          table\n        }); // when the page is loaded it will show the nfts associated with the connected wallet\n\n        var _table = [];\n\n        for (var i = 1; i <= this.state.currentSupply; i++) {\n          if ((await instance.methods.ownerOf(i).call()) == accounts[0]) {\n            var nft_uri = String((await instance.methods.tokenURI(i).call()));\n            var nft_atts = await fetch(nft_uri.replace(\"ipfs://\", \"https://gateway.pinata.cloud/ipfs/\"));\n            nft_atts = await nft_atts.json();\n\n            _table.push(nft_atts);\n          }\n        }\n\n        this.setState({\n          table: _table\n        }); //when there is a purchased event then update ticker on screen\n\n        instance.events.purchased().on('data', async quantiy => {\n          console.log(quantiy.Result);\n          this.setState({\n            table: _table,\n            balance: parseInt((await instance.methods.balanceOf(accounts[0]).call())),\n            currentSupply: parseInt((await instance.methods.currentSupply().call()))\n          });\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n  }\n\n  async mintKey(e) {\n    e.preventDefault();\n    var amount_to_purchase = parseFloat(document.getElementById(\"amount\").value);\n    var price_per_key = parseFloat(\"0.05\");\n    var total = (amount_to_purchase * price_per_key).toPrecision(2).toString();\n    console.log(total);\n    const _this$state = this.state,\n          accounts = _this$state.accounts,\n          contract = _this$state.contract,\n          web3 = _this$state.web3;\n    await contract.methods.purchase(amount_to_purchase).send({\n      from: accounts[0],\n      value: web3.utils.toWei(total, \"ether\")\n    });\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    let rows = [];\n\n    for (let i = 0; i < this.state.balance; i++) {\n      rows.push(React.createElement(NFTRow, {\n        key: i,\n        atts: this.state.table[i],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"minted: \", this.state.currentSupply, \"/\", this.state.maxSupply), React.createElement(\"input\", {\n      id: \"amount\",\n      name: \"amount\",\n      type: \"number\",\n      style: {\n        marginRight: 10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      href: \"#\",\n      onClick: this.mintKey.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Mint\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"(max mints per wallet: 10)\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"price: 1st Key (0.05 ETH/Key), 2nd-10th Key (0.10 ETH/Key)\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"you have: \", this.state.balance, \" keys\"), React.createElement(\"div\", {\n      id: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, rows));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nathanvasquez/Developer/GlassKeys/client/src/App.js"],"names":["React","Component","GlassKey","getWeb3","NFTRow","App","state","web3","accounts","contract","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","currentSupply","parseInt","methods","call","maxSupply","_maxSupply","balance","balanceOf","table","setState","_table","i","ownerOf","nft_uri","String","tokenURI","nft_atts","fetch","replace","json","push","events","purchased","on","quantiy","console","log","Result","error","alert","mintKey","e","preventDefault","amount_to_purchase","parseFloat","document","getElementById","value","price_per_key","total","toPrecision","toString","purchase","send","from","utils","toWei","render","rows","marginRight","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport GlassKey from \"./contracts/GlassKey.json\";\nimport getWeb3 from \"./getWeb3\";\nimport NFTRow from \"./components/NFTRow\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = GlassKey.networks[networkId];\n      const instance = new web3.eth.Contract(\n        GlassKey.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      //variables used to keep track of the tickers\n      const currentSupply = parseInt(await instance.methods.currentSupply().call());\n      const maxSupply = parseInt(await instance.methods._maxSupply().call());\n      const balance = parseInt(await instance.methods.balanceOf(accounts[0]).call());\n\n      // table for displaying token with their type and their owners.\n      const table = \"\"\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ \n        web3,\n        accounts, \n        contract: instance, \n        currentSupply,\n        maxSupply,\n        balance,\n        table,\n      });\n\n      // when the page is loaded it will show the nfts associated with the connected wallet\n      var _table = [];\n      for(var i = 1 ; i <= this.state.currentSupply; i++) {\n          if(await instance.methods.ownerOf(i).call() == accounts[0]) {\n            var nft_uri = String(await instance.methods.tokenURI(i).call());\n            var nft_atts = await fetch(nft_uri.replace(\"ipfs://\", \"https://gateway.pinata.cloud/ipfs/\"));\n            nft_atts = await nft_atts.json();\n            _table.push(nft_atts);\n          }\n      }\n      this.setState({ table: _table });\n\n\n      //when there is a purchased event then update ticker on screen\n      instance.events.purchased()\n          .on('data', async (quantiy) => {\n            console.log(quantiy.Result);\n            this.setState({ \n              table: _table,\n              balance: parseInt(await instance.methods.balanceOf(accounts[0]).call()),\n              currentSupply: parseInt(await instance.methods.currentSupply().call()),\n            });\n          });\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n\n  async mintKey(e) {\n    e.preventDefault()\n    \n    var amount_to_purchase = parseFloat(document.getElementById(\"amount\").value);\n    var price_per_key = parseFloat(\"0.05\");\n    var total = (amount_to_purchase * price_per_key).toPrecision(2).toString();\n    console.log(total);\n    \n    const {accounts, contract, web3} = this.state;\n    await contract.methods.purchase(amount_to_purchase).send({\n      from: accounts[0],\n      value: web3.utils.toWei(total, \"ether\"),\n    })\n  }\n\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    let rows = [];\n    for (let i = 0; i < this.state.balance; i++ ) {\n      rows.push(<NFTRow key={i} atts={this.state.table[i]}></NFTRow>)\n    }\n    return (\n      <div className=\"App\">\n        <p>minted: {this.state.currentSupply}/{this.state.maxSupply}</p>\n        <input id = \"amount\" name = \"amount\" type=\"number\" style={{marginRight: 10}}></input>\n        <a href=\"#\" onClick={this.mintKey.bind(this)}>Mint</a>\n        <p>(max mints per wallet: 10)</p>\n        <p>price: 1st Key (0.05 ETH/Key), 2nd-10th Key (0.10 ETH/Key)</p>\n        <p>you have: {this.state.balance} keys</p>\n        <div id = \"table\">{rows}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
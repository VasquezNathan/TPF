{"ast":null,"code":"var _jsxFileName = \"/Users/nathanvasquez/Developer/GlassKeys/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport GlassKey from \"./contracts/GlassKey.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = GlassKey.networks[networkId];\n        const instance = new web3.eth.Contract(GlassKey.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance,\n          currentSupply: parseInt((await instance.methods.currentSupply().call())),\n          maxSupply: parseInt((await instance.methods._maxSupply().call()))\n        });\n        instance.getPastEvents('purchased', {\n          fromBlock: 0,\n          toBlock: 'latest'\n        }).then(function (events) {\n          this.state.currentSupply = parseInt(instance.methods.currentSupply().call());\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n  }\n\n  async mintKey(e) {\n    e.preventDefault();\n    const _this$state = this.state,\n          accounts = _this$state.accounts,\n          contract = _this$state.contract,\n          web3 = _this$state.web3;\n    await contract.methods.purchase(1).send({\n      from: accounts[0],\n      value: web3.utils.toWei(\"0.05\", \"ether\")\n    });\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"minted: \", this.state.currentSupply, \"/\", this.state.maxSupply), React.createElement(\"a\", {\n      href: \"#\",\n      onClick: this.mintKey.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Mint Key\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nathanvasquez/Developer/GlassKeys/client/src/App.js"],"names":["React","Component","GlassKey","getWeb3","App","state","web3","accounts","contract","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","currentSupply","parseInt","methods","call","maxSupply","_maxSupply","getPastEvents","fromBlock","toBlock","then","events","error","alert","console","mintKey","e","preventDefault","purchase","send","from","value","utils","toWei","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport GlassKey from \"./contracts/GlassKey.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = GlassKey.networks[networkId];\n      const instance = new web3.eth.Contract(\n        GlassKey.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ \n        web3,\n        accounts, \n        contract: instance, \n        currentSupply: parseInt(await instance.methods.currentSupply().call()),\n        maxSupply: parseInt(await instance.methods._maxSupply().call())\n      });\n      \n\n\n      instance.getPastEvents('purchased', {\n        fromBlock: 0,\n        toBlock: 'latest'\n      }).then(function(events){\n          this.state.currentSupply = parseInt(instance.methods.currentSupply().call())\n      });\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  async mintKey(e) {\n    e.preventDefault()\n\n    const {accounts, contract, web3} = this.state;\n    await contract.methods.purchase(1).send({\n      from: accounts[0],\n      value: web3.utils.toWei(\"0.05\", \"ether\"),\n    })\n\n    \n    \n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <p>minted: {this.state.currentSupply}/{this.state.maxSupply}</p>\n        <a href=\"#\" onClick={this.mintKey.bind(this)}>Mint Key</a>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
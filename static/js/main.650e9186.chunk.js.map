{"version":3,"sources":["getWeb3.js","components/NFTRow.js","components/ChangeURI.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","NFTRow","props","img","String","atts","image","replace","style","display","id","src","alt","width","update","state","newURI","document","getElementById","value","contract","methods","setBaseURI","send","from","accounts","tokenURI","call","ChangeURI","owner","type","href","onClick","bind","this","App","table","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","GlassKey","networks","instance","Contract","abi","address","parseInt","currentSupply","_maxSupply","maxSupply","balanceOf","balance","setState","_table","i","ownerOf","nft_uri","fetch","nft_atts","getMetadata","test","json","push","events","Transfer","on","emitted","returnValues","to","tokenId","alert","error","e","preventDefault","amount_to_purchase","parseFloat","price_per_key","total","toPrecision","toString","purchase","utils","toWei","rows","length","key","className","name","marginRight","mintKey","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.650e9186.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:7545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from \"react\";\n\nfunction NFTRow(props) {\n    const img = String(props.atts && props.atts.image).replace(\"ipfs://\", \"https://gateway.pinata.cloud/ipfs/\")\n    return (\n        <div style={{display: \"inline-block\"}}>\n            <p>#{props.atts && props.atts.id}</p>\n            <img src = {img} alt = {img} width=\"100\"></img>\n        </div>\n    );\n}\n\nexport default NFTRow;","import React, { Component } from \"react\"\n\nasync function update(state) {\n    var newURI = document.getElementById(\"newURI\").value;\n\n    await state.contract.methods.setBaseURI(newURI).send({from: state.accounts[0] })\n    console.log(String(await state.contract.methods.tokenURI(1).call()));\n}\n\nfunction ChangeURI(props) {\n    \n    if (props.owner == true){\n        return(\n            <div>\n                <input id = \"newURI\" type=\"text\"></input>\n                <a href = \"#\" onClick={update.bind(this, props.this.state)}>update</a>\n            </div>\n        );\n    }\n    else {\n        return (<></>);\n    }\n\n}\n\nexport default ChangeURI;","import React, { Component } from \"react\";\nimport GlassKey from \"./contracts/GlassKey.json\";\nimport getWeb3 from \"./getWeb3\";\nimport NFTRow from \"./components/NFTRow\";\nimport ChangeURI from \"./components/ChangeURI\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {web3: null, accounts: null, contract: null, table: []};\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = GlassKey.networks[networkId];\n      const instance = new web3.eth.Contract(\n        GlassKey.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      //variables used to keep track of the tickers\n      const currentSupply = parseInt(await instance.methods.currentSupply().call());\n      const maxSupply = parseInt(await instance.methods._maxSupply().call());\n      const balance = parseInt(await instance.methods.balanceOf(accounts[0]).call());\n      const owner = await instance.methods.owner().call() == accounts[0];\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ \n        web3,\n        accounts, \n        contract: instance, \n        currentSupply,\n        maxSupply,\n        balance,\n        owner,\n      });\n\n      // when the page is loaded it will show the nfts associated with the connected wallet\n      var _table = [];\n\n      for(var i = 1 ; i <= this.state.currentSupply; i++) {\n          if(await instance.methods.ownerOf(i).call() == accounts[0]) {\n            var nft_uri = String(await instance.methods.tokenURI(i).call());\n            var nft_atts = await fetch(nft_uri.replace(\"ipfs://\", \"https://gateway.pinata.cloud/ipfs/\"));\n            var test = await instance.methods.getMetadata(i).call();\n            console.log(test);\n              try {\n                nft_atts = await nft_atts.json();\n              }\n              catch (error){\n                console.log(error);\n                console.log(\"fetch() returned something not parsable as json...\");\n              }\n            \n            _table.push(nft_atts);\n          }\n      }\n      this.setState({ table: _table });\n\n\n      //when there is a purchased event then update ticker on screen\n      instance.events.Transfer()\n          .on('data', async (emitted) => {\n            if(emitted.returnValues.to == accounts[0]) {\n              var nft_uri = String(await instance.methods.tokenURI(emitted.returnValues.tokenId).call());\n              var nft_atts = await fetch(nft_uri.replace(\"ipfs://\", \"https://gateway.pinata.cloud/ipfs/\"));\n              nft_atts = await nft_atts.json();\n              _table.push(nft_atts);\n            }\n            this.setState({ \n              table: _table,\n              balance: parseInt(await instance.methods.balanceOf(accounts[0]).call()),\n              currentSupply: parseInt(await instance.methods.currentSupply().call()),\n            });\n          });\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  async mintKey(e) {\n    e.preventDefault();\n    const {accounts, contract, web3} = this.state;\n    var total;\n    var amount_to_purchase = parseFloat(document.getElementById(\"amount\").value);\n    var price_per_key = parseFloat(\"0.10\");\n\n\n    if (await contract.methods.balanceOf(accounts[0]).call() == 0) {\n      total = ( ((amount_to_purchase-1) * price_per_key) + (price_per_key/2) ).toPrecision(2).toString();\n    }\n    else {\n        total = (amount_to_purchase * price_per_key).toPrecision(2).toString();\n    }\n    \n    await contract.methods.purchase(amount_to_purchase).send({\n      from: accounts[0],\n      value: web3.utils.toWei(total, \"ether\"),\n    })\n  }\n\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    let rows = [];\n    // console.log(this.state.table);\n    for (let i = 0; i < this.state.table.length; i++ ) {\n      rows.push(<NFTRow key={i} atts={this.state.table[i]}></NFTRow>);\n    }\n\n    return (\n      <div className=\"App\">\n        <p>minted: {this.state.currentSupply}/{this.state.maxSupply}</p>\n        <input id = \"amount\" name = \"amount\" type=\"number\" style={{marginRight: 10}}></input>\n        <a href=\"#\" onClick={this.mintKey.bind(this)}>Mint</a>\n        <p>(max mints per wallet: 10)</p>\n        <p>price: 1st Key (0.05 ETH/Key), 2nd-10th Key (0.10 ETH/Key)</p>\n        <p>you have: {this.state.balance} keys</p>\n        <div id = \"table\">{rows}</div>\n        <ChangeURI owner = {this.state.owner} this = {this}></ChangeURI>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}